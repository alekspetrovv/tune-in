# variables:
#   MAVEN_OPTS: -Dmaven.repo.local=.m2/repository


# image: maven:latest

# stages:
#   - build
#   - test
#   - sonarqube
#   - deploy
#   - compose


# cache:
#   paths:
#     - .m2/repository
#     - target

# build:
#   stage: build
#   script:
#     - cd backend
#     - mvn clean install

# test:
#   stage: test
#   script:
#     - cd backend
#     - mvn test

# sonarqube:
#   stage: sonarqube
#   script:
#     - cd backend
#     - mvn clean package sonar:sonar -Dsonar.login=$SONAR_LOGIN -Dsonar.password=$SONAR_PASSWORD

# deploy:
#   stage: deploy
#   script:
#     - cd backend
#     - mvn compile

# compose:
#   image: docker
#   services:
#     - docker:dind
#   stage: compose
#   script:
#     - cd backend
#     - echo "compose".



# image: docker:dind

# stages:
#   - build
#   - deploy

# services:
#   - docker:dind

  

# build:
#   stage: build
#   before_script:
#     # $CI_JOB_TOKEN is variable automatically added by Gitlab: see https://docs.gitlab.com/ee/ci/variables/predefined_variables.html#variables-reference
#     - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token registry.gitlab.com --password-stdin
#   script:
#     - docker pull $GITLAB_IMAGE || true # Allows us to use --cache-from
#     - docker build --cache-from $GITLAB_IMAGE -t $GITLAB_IMAGE:$CI_COMMIT_SHA .
#     - docker push $GITLAB_IMAGE:$CI_COMMIT_SHA

# # deploy:
# #   stage: deploy
# #   before_script:
# #     # Login to Gitlab registry
# #     - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token registry.gitlab.com --password-stdin
# #     # Login to Google Cloud Registry
# #     - echo $GOOGLE_CLOUD_ACCOUNT | docker login -u _json_key --password-stdin https://eu.gcr.io
# #   script:
# #     - docker pull $GITLAB_IMAGE:$CI_COMMIT_SHA
# #     - docker tag $GITLAB_IMAGE:$CI_COMMIT_SHA $GCR_IMAGE:latest
# #     - docker push $GCR_IMAGE


# image: docker:latest

# services:
#     - name: docker:dind
#       entrypoint: ["env", "-u", "DOCKER_HOST"]
#       command: ["dockerd-entrypoint.sh"]
#       variables:
#         DOCKER_HOST: tcp://docker:2375/
#         DOCKER_DRIVER: overlay2
#         # See https://github.com/docker-library/docker/pull/166
#         DOCKER_TLS_CERTDIR: ""

# stages:
#   - build

# before_script:
#   # Login to Google Container Registry
#   - base64 -d $GCP_SA_KEY | docker login -u _json_key --password-stdin https://gcr.io
#   # Login to Gitlab container Registry
#   - echo $CI_JOB_TOKEN | docker login registry.example.com -u I444915 -p p4yaiWwYJNVKhPiqfhT5

# build:
#   stage: build
#   script:
#     # Build and tag image for both GCR and Gitlab registries
#     - docker build --cache-from -t gcr.io/arctic-goal-676703/colinwilson/test_image:1.0 .
#     # Push image to GCR
#     - docker push gcr.io/arctic-goal-676703/colinwilson/test_image:1.0
#     # Push image to Gitlab registry
#     - docker push $CI_REGISTRY_IMAGE:latest


stages:
  - deploy

deploy_prod:
  stage: deploy
  image: google/cloud-sdk:alpine
  script:
  - cat $GCP_SA_KEY >> gcloud-service-key.json
  - echo gcloud-service-key.json
  # - ls
  # - gcloud auth activate-service-account --key-file gcloud-service-key.json
  # - gcloud config set project $GCP_PROJECT_ID
  # - gcloud builds submit . --config=cloudbuild.yaml

# after_script:
# - rm /tmp/gcloud-service-key.json

